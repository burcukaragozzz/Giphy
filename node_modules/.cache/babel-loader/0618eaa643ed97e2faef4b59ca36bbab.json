{"ast":null,"code":"var _jsxFileName = \"/Users/burcu.karagoz/Project2/giphy/src/gifL\\u0130st.js\";\nimport React from 'react';\nimport './App.css';\nimport Gif from './gif';\nimport NoGifs from './noGifs';\n\nclass GifList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loadingState: false,\n      offset: 0\n    };\n  }\n\n  componentDidMount() {\n    this.refs.iScroll.addEventListener(\"scroll\", () => {\n      if (this.refs.iScroll.scrollTop + this.refs.iScroll.clientHeight >= this.refs.iScroll.scrollHeight - 200) {\n        this.loadMoreItems();\n      }\n    });\n  }\n\n  loadMoreItems() {\n    /*const { data, setGiflist } = this.props;\n     if(this.state.loadingState){\n      return;\n    }\n     this.setState(prevState => ({\n      offset: prevState.offset + 1,\n    }));\n      setTimeout(() => {\n      fetch('https://api.giphy.com/v1/gifs/trending?&offset=' + this.state.offset + '&limit=20&api_key=dc6zaTOxFJmzC')\n      .then(response => response.json())\n      .then(responseData => {\n        setGiflist(data.concat(responseData.data))\n      })\n      .catch(error => {\n        console.log(error);\n      }); \n      this.setState({ gifs: this.props.gifs, loadingState: false });\n    }, 1000);*/\n  }\n\n  render() {\n    const results = this.props.data;\n    let gifs;\n\n    if (results.length > 0) {\n      gifs = results.map(gif => React.createElement(Gif, {\n        url: gif.images.fixed_height.url,\n        key: gif.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }));\n    } else {\n      gifs = React.createElement(NoGifs, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      ref: \"iScroll\",\n      style: {\n        height: \"100vh\",\n        overflow: \"auto\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"gif-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, gifs), this.state.loadingState ? React.createElement(\"p\", {\n      className: \"loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \" loading More Items..\") : \"\");\n  }\n\n}\n\nexport default GifList;","map":{"version":3,"sources":["/Users/burcu.karagoz/Project2/giphy/src/gifLİst.js"],"names":["React","Gif","NoGifs","GifList","Component","constructor","props","state","loadingState","offset","componentDidMount","refs","iScroll","addEventListener","scrollTop","clientHeight","scrollHeight","loadMoreItems","render","results","data","gifs","length","map","gif","images","fixed_height","url","id","height","overflow"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAGA,MAAMC,OAAN,SAAsBH,KAAK,CAACI,SAA5B,CAAsC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACVC,MAAAA,YAAY,EAAE,KADJ;AAEVC,MAAAA,MAAM,EAAE;AAFE,KAAb;AAIA;;AAEFC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,IAAL,CAAUC,OAAV,CAAkBC,gBAAlB,CAAmC,QAAnC,EAA6C,MAAM;AACjD,UAAI,KAAKF,IAAL,CAAUC,OAAV,CAAkBE,SAAlB,GAA8B,KAAKH,IAAL,CAAUC,OAAV,CAAkBG,YAAhD,IAAgE,KAAKJ,IAAL,CAAUC,OAAV,CAAkBI,YAAlB,GAAiC,GAArG,EAAyG;AACvG,aAAKC,aAAL;AACD;AACF,KAJD;AAKD;;AAEDA,EAAAA,aAAa,GAAG;AACd;;;;;;;;;;;;;;;;;;AAqBD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAMC,OAAO,GAAG,KAAKb,KAAL,CAAWc,IAA3B;AACA,QAAIC,IAAJ;;AACA,QAAGF,OAAO,CAACG,MAAR,GAAiB,CAApB,EAAuB;AACrBD,MAAAA,IAAI,GAAGF,OAAO,CAACI,GAAR,CAAaC,GAAG,IAAI,oBAAC,GAAD;AAAK,QAAA,GAAG,EAAEA,GAAG,CAACC,MAAJ,CAAWC,YAAX,CAAwBC,GAAlC;AAAuC,QAAA,GAAG,EAAEH,GAAG,CAACI,EAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAApB,CAAP;AACD,KAFD,MAGI;AACFP,MAAAA,IAAI,GAAE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAN;AACD;;AAED,WACE;AAAK,MAAA,GAAG,EAAC,SAAT;AAAmB,MAAA,KAAK,EAAE;AAAEQ,QAAAA,MAAM,EAAE,OAAV;AAAmBC,QAAAA,QAAQ,EAAE;AAA7B,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIT,IADJ,CADF,EAIG,KAAKd,KAAL,CAAWC,YAAX,GAA0B;AAAG,MAAA,SAAS,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAA1B,GAA6E,EAJhF,CADF;AAQD;;AA3DmC;;AA8DtC,eAAeL,OAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Gif from './gif';\nimport NoGifs from './noGifs';\n\n\nclass GifList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n       loadingState: false,\n       offset: 0,\n     };\n   }\n\n  componentDidMount() {\n    this.refs.iScroll.addEventListener(\"scroll\", () => {\n      if (this.refs.iScroll.scrollTop + this.refs.iScroll.clientHeight >= this.refs.iScroll.scrollHeight - 200){\n        this.loadMoreItems();\n      }\n    });\n  }\n\n  loadMoreItems() {\n    /*const { data, setGiflist } = this.props;\n\n    if(this.state.loadingState){\n      return;\n    }\n\n    this.setState(prevState => ({\n      offset: prevState.offset + 1,\n    }));\n \n    setTimeout(() => {\n      fetch('https://api.giphy.com/v1/gifs/trending?&offset=' + this.state.offset + '&limit=20&api_key=dc6zaTOxFJmzC')\n      .then(response => response.json())\n      .then(responseData => {\n        setGiflist(data.concat(responseData.data))\n      })\n      .catch(error => {\n        console.log(error);\n      }); \n      this.setState({ gifs: this.props.gifs, loadingState: false });\n    }, 1000);*/\n  }\n\n  render() {\n    const results = this.props.data;\n    let gifs;\n    if(results.length > 0 ){\n      gifs = results.map( gif => <Gif url={gif.images.fixed_height.url} key={gif.id} /> );\n    }\n    else{\n      gifs= <NoGifs/>\n    }\n                           \n    return (\n      <div ref=\"iScroll\" style={{ height: \"100vh\", overflow: \"auto\" }}>\n        <ul className=\"gif-list\">\n          { gifs }\n        </ul>\n        {this.state.loadingState ? <p className=\"loading\"> loading More Items..</p> : \"\"}\n      </div>\n    );\n  }\n}\n\nexport default GifList;\n"]},"metadata":{},"sourceType":"module"}