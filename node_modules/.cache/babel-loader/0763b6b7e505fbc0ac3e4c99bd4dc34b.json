{"ast":null,"code":"var _jsxFileName = \"/Users/burcu.karagoz/Project2/giphy/src/gifL\\u0130st.js\";\nimport React from 'react';\nimport './App.css';\nimport Gif from './gif';\nimport NoGifs from './noGifs';\n\nclass GifList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loadingState: false\n    };\n  }\n\n  componentDidMount() {\n    this.refs.iScroll.addEventListener(\"scroll\", () => {\n      if (this.refs.iScroll.scrollTop + this.refs.iScroll.clientHeight >= this.refs.iScroll.scrollHeight - 20) {\n        this.loadMoreItems();\n      }\n    });\n  }\n\n  loadMoreItems() {\n    if (this.state.loadingState) {\n      return;\n    }\n\n    this.setState({\n      loadingState: true\n    });\n    setTimeout(() => {\n      this.setState({\n        items: this.props.gifs + 20,\n        loadingState: false\n      });\n    }, 1000);\n  }\n\n  render() {\n    const results = this.props.data;\n    let gifs;\n\n    if (results.length > 0) {\n      gifs = results.map(gif => React.createElement(Gif, {\n        url: gif.images.fixed_height.url,\n        key: gif.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }));\n    } else {\n      gifs = React.createElement(NoGifs, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"ul\", {\n      className: \"gif-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, gifs);\n  }\n\n}\n\nexport default GifList;","map":{"version":3,"sources":["/Users/burcu.karagoz/Project2/giphy/src/gifLÄ°st.js"],"names":["React","Gif","NoGifs","GifList","Component","constructor","props","state","loadingState","componentDidMount","refs","iScroll","addEventListener","scrollTop","clientHeight","scrollHeight","loadMoreItems","setState","setTimeout","items","gifs","render","results","data","length","map","gif","images","fixed_height","url","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAGA,MAAMC,OAAN,SAAsBH,KAAK,CAACI,SAA5B,CAAsC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACVC,MAAAA,YAAY,EAAE;AADJ,KAAb;AAGA;;AAEFC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,IAAL,CAAUC,OAAV,CAAkBC,gBAAlB,CAAmC,QAAnC,EAA6C,MAAM;AACjD,UAAI,KAAKF,IAAL,CAAUC,OAAV,CAAkBE,SAAlB,GAA8B,KAAKH,IAAL,CAAUC,OAAV,CAAkBG,YAAhD,IAAgE,KAAKJ,IAAL,CAAUC,OAAV,CAAkBI,YAAlB,GAAiC,EAArG,EAAwG;AACtG,aAAKC,aAAL;AACD;AACF,KAJD;AAKD;;AAEDA,EAAAA,aAAa,GAAG;AAChB,QAAG,KAAKT,KAAL,CAAWC,YAAd,EAA2B;AAC1B;AACA;;AACC,SAAKS,QAAL,CAAc;AAAET,MAAAA,YAAY,EAAE;AAAhB,KAAd;AACAU,IAAAA,UAAU,CAAC,MAAM;AACf,WAAKD,QAAL,CAAc;AAAEE,QAAAA,KAAK,EAAE,KAAKb,KAAL,CAAWc,IAAX,GAAkB,EAA3B;AAA+BZ,QAAAA,YAAY,EAAE;AAA7C,OAAd;AACD,KAFS,EAEP,IAFO,CAAV;AAGD;;AAEDa,EAAAA,MAAM,GAAG;AACP,UAAMC,OAAO,GAAG,KAAKhB,KAAL,CAAWiB,IAA3B;AACA,QAAIH,IAAJ;;AACA,QAAGE,OAAO,CAACE,MAAR,GAAiB,CAApB,EAAuB;AACrBJ,MAAAA,IAAI,GAAGE,OAAO,CAACG,GAAR,CAAaC,GAAG,IAAI,oBAAC,GAAD;AAAK,QAAA,GAAG,EAAEA,GAAG,CAACC,MAAJ,CAAWC,YAAX,CAAwBC,GAAlC;AAAuC,QAAA,GAAG,EAAEH,GAAG,CAACI,EAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAApB,CAAP;AACD,KAFD,MAGI;AACFV,MAAAA,IAAI,GAAE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAN;AACD;;AAED,WACE;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIA,IADJ,CADF;AAMD;;AA1CmC;;AA6CtC,eAAejB,OAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Gif from './gif';\nimport NoGifs from './noGifs';\n\n\nclass GifList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n       loadingState: false\n     };\n   }\n\n  componentDidMount() {\n    this.refs.iScroll.addEventListener(\"scroll\", () => {\n      if (this.refs.iScroll.scrollTop + this.refs.iScroll.clientHeight >= this.refs.iScroll.scrollHeight - 20){\n        this.loadMoreItems();\n      }\n    });\n  }\n\n  loadMoreItems() {\n\t if(this.state.loadingState){\n\t\t return;\n\t }\n    this.setState({ loadingState: true });\n    setTimeout(() => {\n      this.setState({ items: this.props.gifs + 20, loadingState: false });\n    }, 1000);\n  }\n\n  render() {\n    const results = this.props.data;\n    let gifs;\n    if(results.length > 0 ){\n      gifs = results.map( gif => <Gif url={gif.images.fixed_height.url} key={gif.id} /> );\n    }\n    else{\n      gifs= <NoGifs/>\n    }\n                           \n    return (\n      <ul className=\"gif-list\">\n        { gifs }\n      </ul>\n      \n    );\n  }\n}\n\nexport default GifList;\n"]},"metadata":{},"sourceType":"module"}