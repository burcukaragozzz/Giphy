{"version":3,"sources":["gif.js","noGifs.js","gifLİst.js","searchForm.js","App.js","serviceWorker.js","index.js"],"names":["Gif","className","src","this","props","url","alt","React","Component","NoGifs","GifList","state","loadingState","offset","gifContainer","document","querySelector","addEventListener","scrollHeight","clientHeight","scrollTop","loadMoreItems","data","setGiflist","setState","prevState","setTimeout","fetch","then","response","json","responseData","concat","catch","error","console","log","gifs","results","length","map","gif","index","images","fixed_height","key","id","style","height","overflow","marginTop","Search","searchText","e","target","value","preventDefault","onSearch","currentTarget","reset","onSubmit","handleSubmit","bind","type","onChange","onSearchChange","ref","placeholder","App","newData","query","performSearch","ReactDOM","render","dataURL","getElementById","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9ea79412.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Gif extends React.Component {\n  render() {\n    return (\n    <li className=\"gif-wrap\">\n      <img src={ this.props.url } alt=\"\"/>\n    </li>\n    );\n  }; \n}\n\nexport default Gif;\n","import React from 'react';\nimport './App.css';\n\nclass NoGifs extends React.Component {\n  render()\n   {\n    return (\n        <p className=\"noGifs-message\">Sorry, no GIFs match your search. </p>\n     );\n   }\n}\nexport default NoGifs;","import React from 'react';\nimport './App.css';\nimport Gif from './gif';\nimport NoGifs from './noGifs';\n\n\nclass GifList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n       loadingState: false,\n       offset: 0,\n     };\n   }\n\n  componentDidMount() {\n    const gifContainer = document.querySelector('#gifContainer');\n\n    gifContainer.addEventListener(\"scroll\", () => {\n      if(gifContainer.scrollHeight === gifContainer.clientHeight + gifContainer.scrollTop) {\n        this.loadMoreItems();\n      }\n    });\n  }\n\n  loadMoreItems() {\n    const { data, setGiflist } = this.props;\n\n    if(this.state.loadingState){\n      return;\n    }\n\n    this.setState(prevState => ({\n      offset: prevState.offset + 1,\n      loadingState: true,\n    }));\n \n    setTimeout(() => {\n      fetch('https://api.giphy.com/v1/gifs/trending?&offset=' + this.state.offset + '&limit=20&api_key=dc6zaTOxFJmzC')\n      .then(response => response.json())\n      .then(responseData => {\n        setGiflist(data.concat(responseData.data))\n      })\n      .catch(error => {\n        console.log(error);\n      }); \n      this.setState({ gifs: this.props.gifs, loadingState: false });\n    }, 1000);\n  }\n\n  render() {\n    const results = this.props.data;\n    let gifs;\n    if(results.length > 0 ){\n      gifs = results.map((gif, index) => <Gif url={gif.images.fixed_height.url} key={index} />);\n    }\n    else{\n      gifs= <NoGifs/>\n    }\n                           \n    return (\n      <div id=\"gifContainer\" style={{ height: \"calc(100vh - 76px)\", overflow: \"auto\", marginTop: '10px' }}>\n        <ul className=\"gif-list\">\n          { gifs }\n        </ul>\n        {this.state.loadingState ? <p className=\"loading\"> loading More Items..</p> : \"\"}\n      </div>\n    );\n  }\n}\n\nexport default GifList;\n","import React from 'react';\nimport './App.css';\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n        this.state = {\n        searchText: ''\n     }\n  }\n\n  onSearchChange(e) {\n    this.setState({ searchText: e.target.value });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.onSearch(this.state.searchText);\n    e.currentTarget.reset();\n  }\n\n  render() {\n    return (\n      <form className=\"search-form\" onSubmit={this.handleSubmit.bind(this)}>\n        <input className=\"search-area\"\n               type=\"text\"\n               onChange={this.onSearchChange.bind(this)}\n               ref=\"query\"\n               placeholder=\"  Search all the GIFs :)\" />\n        <button type=\"submit\" id=\"submit\" className=\"search-button\">\n          <img className=\"search-logo\" src=\"search.png\" alt=\"searchLogo\" />\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default Search;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport GifList from './gifLİst';\nimport Search from './searchForm';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      gifs: [],\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://api.giphy.com/v1/gifs/trending?&offset=0&limit=20&api_key=dc6zaTOxFJmzC')\n    .then(response => response.json())\n    .then(responseData => {\n      this.setState({gifs: responseData.data, });\n    })\n    .catch(error => {\n      console.log(error);\n    });  \n  }\n\n  setGiflist = newData => {\n    this.setState({\n      gifs: newData,\n    })\n  }\n\n  performSearch(query) {\n    fetch(`https://api.giphy.com/v1/gifs/search?q=${query}&limit=20&api_key=dc6zaTOxFJmzC`)\n      .then(response => response.json())\n      .then(responseData => {\n        this.setState({gifs: responseData.data });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n  \n  render() {\n    return (\n      <div>\n        <div className=\"header\">\n          <img className=\"header-logo\" src=\"giphyLogo.jpeg\" alt=\"headerLogo\" />\n          <Search \n            onSearch={this.performSearch.bind(this)} \n          />\n        </div>\n        <GifList data={this.state.gifs} setGiflist={this.setGiflist} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <App dataURL='https://api.giphy.com/v1/gifs/trending?api_key=dc6zaTOxFJmzC'/>,\n  document.getElementById('root')\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}